#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ PDF —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –∏ —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞
"""
import os
import re
import pandas as pd
import pdfplumber
from openpyxl import Workbook
from openpyxl.styles import PatternFill, Font, Alignment, Border, Side
from openpyxl.utils.dataframe import dataframe_to_rows
import math

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Å—Å—ã —Ç—Ä—É–± –ø–æ –ì–û–°–¢ 18599-2001
# –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –ø–æ–ª–∏—ç—Ç–∏–ª–µ–Ω–∞ –ü–≠100 = 0.96 –≥/—Å–º¬≥
PE_DENSITY = 0.96  # –≥/—Å–º¬≥


def calculate_pipe_mass_per_meter(diameter, wall_thickness):
    """
    –†–∞—Å—á–µ—Ç –º–∞—Å—Å—ã —Ç—Ä—É–±—ã –∑–∞ 1 –º–µ—Ç—Ä –ø–æ –ì–û–°–¢ 18599-2001
    
    –§–æ—Ä–º—É–ª–∞: m = œÄ * (D - e) * e * œÅ / 1000
    –≥–¥–µ:
    m - –º–∞—Å—Å–∞ 1 –º–µ—Ç—Ä–∞ —Ç—Ä—É–±—ã (–∫–≥/–º)
    D - –Ω–∞—Ä—É–∂–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä (–º–º)
    e - —Ç–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–Ω–∫–∏ (–º–º)
    œÅ - –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–≥/—Å–º¬≥)
    œÄ - 3.14159
    """
    # –§–æ—Ä–º—É–ª–∞ –º–∞—Å—Å—ã —Ç—Ä—É–±—ã
    mass = math.pi * (diameter - wall_thickness) * wall_thickness * PE_DENSITY / 1000
    return round(mass, 2)


def extract_pipe_parameters(nomenclature):
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç—Ä—É–±—ã –∏–∑ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
    –§–æ—Ä–º–∞—Ç: "–¢—Ä—É–±–∞ ... SDR17 - 160 —Ö9,50" –∏–ª–∏ "–¢—Ä—É–±–∞ ... ‚àÖ160—Ö23,7"
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (–¥–∏–∞–º–µ—Ç—Ä, —Ç–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–Ω–∫–∏) –∏–ª–∏ None
    """
    # –ü–∞—Ç—Ç–µ—Ä–Ω 1: SDR —Ñ–æ—Ä–º–∞—Ç (160 —Ö9,50)
    pattern1 = r'(\d+)\s*[—Öx√ó]\s*(\d+[,.]?\d*)'
    # –ü–∞—Ç—Ç–µ—Ä–Ω 2: ‚àÖ —Ñ–æ—Ä–º–∞—Ç (‚àÖ160—Ö23,7)
    pattern2 = r'[‚àÖ√ò](\d+)[—Öx√ó](\d+[,.]?\d*)'
    
    match = re.search(pattern1, nomenclature) or re.search(pattern2, nomenclature)
    
    if match:
        diameter = int(match.group(1))
        thickness = float(match.group(2).replace(',', '.'))
        return diameter, thickness
    
    return None


def is_pipe(nomenclature):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ —Ç—Ä—É–±–æ–π"""
    if not nomenclature or pd.isna(nomenclature):
        return False
    nomenclature_lower = str(nomenclature).lower()
    return '—Ç—Ä—É–±–∞' in nomenclature_lower or '—Ñ—É—Ç–ª—è—Ä' in nomenclature_lower


def is_pipe_or_fitting(nomenclature):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ —Ç—Ä—É–±–æ–π –∏–ª–∏ —Ñ–∏—Ç–∏–Ω–≥–æ–º"""
    if not nomenclature or pd.isna(nomenclature):
        return False
    
    nomenclature_lower = str(nomenclature).lower()
    
    # –¢—Ä—É–±—ã
    if '—Ç—Ä—É–±–∞' in nomenclature_lower or '—Ñ—É—Ç–ª—è—Ä' in nomenclature_lower:
        return True
    
    # –§–∏—Ç–∏–Ω–≥–∏ (—Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ)
    fittings = ['–º—É—Ñ—Ç–∞', '–æ—Ç–≤–æ–¥', '–≤—Ç—É–ª–∫–∞', '—Ñ–ª–∞–Ω–µ—Ü']
    
    return any(fitting in nomenclature_lower for fitting in fittings)


def parse_pdf_file(pdf_path):
    """
    –ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ PDF —Ñ–∞–π–ª–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏:
    [{
        '–§–∞–π–ª': '–∏–º—è —Ñ–∞–π–ª–∞',
        '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞': '...',
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': ...,
        '–ú–∞—Å—Å–∞': ...,
        '–ó–∞–≤–æ–¥ –∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å': '...'
    }, ...]
    """
    filename = os.path.basename(pdf_path)
    # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .pdf –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    filename_without_ext = filename.replace('.pdf', '')
    data = []
    
    print(f"\nüìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {filename}")
    
    try:
        with pdfplumber.open(pdf_path) as pdf:
            for page_num, page in enumerate(pdf.pages, 1):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                tables = page.extract_tables()
                
                if not tables:
                    continue
                
                for table in tables:
                    if not table or len(table) < 2:
                        continue
                    
                    # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
                    header_row = None
                    header_idx = -1
                    
                    for idx, row in enumerate(table[:5]):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫
                        if row and any('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' in str(cell) for cell in row if cell):
                            header_row = row
                            header_idx = idx
                            break
                    
                    if not header_row:
                        continue
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                    name_col = None
                    qty_col = None
                    manufacturer_col = None
                    
                    for col_idx, header in enumerate(header_row):
                        if not header:
                            continue
                        header_str = str(header).strip().replace('\n', '').replace(' ', '').replace('-', '')
                        
                        if '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' in str(header) and '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫' in str(header).lower():
                            name_col = col_idx
                        elif '–∫–æ–ª–∏—á' in header_str.lower() or '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' in header_str.lower():
                            qty_col = col_idx
                        elif '–ó–∞–≤–æ–¥' in str(header) or '–∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å' in str(header).lower():
                            manufacturer_col = col_idx
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
                    for row in table[header_idx + 1:]:
                        if not row or len(row) <= max(filter(None, [name_col, qty_col, manufacturer_col])):
                            continue
                        
                        nomenclature = row[name_col] if name_col is not None else ''
                        quantity = row[qty_col] if qty_col is not None else ''
                        manufacturer = row[manufacturer_col] if manufacturer_col is not None else ''
                        
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                        if not nomenclature or str(nomenclature).strip() == '':
                            continue
                        
                        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                        nomenclature = str(nomenclature).strip()
                        
                        # –§–∏–ª—å—Ç—Ä: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç—Ä—É–±—ã –∏ —Ñ–∏—Ç–∏–Ω–≥–∏
                        if not is_pipe_or_fitting(nomenclature):
                            continue
                        
                        # –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                        try:
                            if quantity and str(quantity).strip():
                                quantity_str = str(quantity).strip().replace(',', '.').replace(' ', '')
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏
                                qty_match = re.search(r'(\d+[.,]?\d*)', quantity_str)
                                if qty_match:
                                    quantity = float(qty_match.group(1).replace(',', '.'))
                                else:
                                    quantity = None
                            else:
                                quantity = None
                        except:
                            quantity = None
                        
                        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
                        manufacturer = str(manufacturer).strip() if manufacturer else ''
                        
                        # –†–∞—Å—á–µ—Ç –º–∞—Å—Å—ã –¥–ª—è —Ç—Ä—É–±
                        mass = None
                        if is_pipe(nomenclature):
                            params = extract_pipe_parameters(nomenclature)
                            if params:
                                diameter, thickness = params
                                mass = calculate_pipe_mass_per_meter(diameter, thickness)
                        
                        data.append({
                            '–§–∞–π–ª': filename_without_ext,
                            '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞': nomenclature,
                            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': quantity,
                            '–ú–∞—Å—Å–∞': mass,
                            '–ó–∞–≤–æ–¥ –∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å': manufacturer
                        })
    
    except Exception as e:
        print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {filename}: {e}")
    
    print(f"   ‚úì –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(data)}")
    return data


def create_excel_with_formatting(data, output_file):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    - –°–µ—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    - –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –∏ –≥—Ä–∞–Ω–∏—Ü—ã
    """
    if not data:
        print("‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏")
        return
    
    # –°–æ–∑–¥–∞–µ–º DataFrame
    df = pd.DataFrame(data)
    
    # –°–æ–∑–¥–∞–µ–º Excel workbook
    wb = Workbook()
    ws = wb.active
    ws.title = "–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è"
    
    # –°—Ç–∏–ª–∏
    gray_fill = PatternFill(start_color="D3D3D3", end_color="D3D3D3", fill_type="solid")
    header_fill = PatternFill(start_color="4472C4", end_color="4472C4", fill_type="solid")
    header_font = Font(bold=True, color="FFFFFF")
    bold_font = Font(bold=True)
    center_align = Alignment(horizontal="center", vertical="center", wrap_text=True)
    left_align = Alignment(horizontal="left", vertical="center", wrap_text=True)
    thin_border = Border(
        left=Side(style='thin'),
        right=Side(style='thin'),
        top=Side(style='thin'),
        bottom=Side(style='thin')
    )
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    headers = ['–§–∞–π–ª', '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–ú–∞—Å—Å–∞', '–ó–∞–≤–æ–¥ –∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å']
    for col_idx, header in enumerate(headers, 1):
        cell = ws.cell(row=1, column=col_idx, value=header)
        cell.fill = header_fill
        cell.font = header_font
        cell.alignment = center_align
        cell.border = thin_border
    
    # –î–∞–Ω–Ω—ã–µ
    current_file = None
    row_idx = 2
    
    for idx, row in df.iterrows():
        # –ï—Å–ª–∏ –Ω–æ–≤—ã–π —Ñ–∞–π–ª - –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        if row['–§–∞–π–ª'] != current_file:
            current_file = row['–§–∞–π–ª']
            
            # –°—Ç—Ä–æ–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ñ–∞–π–ª–∞ (—Å–µ—Ä—ã–π —Ñ–æ–Ω)
            if row_idx > 2:  # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º —Ñ–∞–π–ª–æ–º
                row_idx += 1
            
            file_cell = ws.cell(row=row_idx, column=1, value=current_file)
            file_cell.fill = gray_fill
            file_cell.font = bold_font
            file_cell.alignment = left_align
            file_cell.border = thin_border
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —è—á–µ–π–∫–∏ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            ws.merge_cells(start_row=row_idx, start_column=1, end_row=row_idx, end_column=5)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫–æ –≤—Å–µ–º —è—á–µ–π–∫–∞–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            for col in range(1, 6):
                cell = ws.cell(row=row_idx, column=col)
                cell.fill = gray_fill
                cell.border = thin_border
            
            row_idx += 1
        
        # –î–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        ws.cell(row=row_idx, column=1, value='').border = thin_border
        ws.cell(row=row_idx, column=2, value=row['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞']).border = thin_border
        ws.cell(row=row_idx, column=2).alignment = left_align
        
        qty_cell = ws.cell(row=row_idx, column=3, value=row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] if pd.notna(row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']) else '')
        qty_cell.border = thin_border
        qty_cell.alignment = center_align
        
        mass_cell = ws.cell(row=row_idx, column=4, value=row['–ú–∞—Å—Å–∞'] if pd.notna(row['–ú–∞—Å—Å–∞']) else '')
        mass_cell.border = thin_border
        mass_cell.alignment = center_align
        
        manuf_cell = ws.cell(row=row_idx, column=5, value=row['–ó–∞–≤–æ–¥ –∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å'])
        manuf_cell.border = thin_border
        manuf_cell.alignment = center_align
        
        row_idx += 1
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
    ws.column_dimensions['A'].width = 30
    ws.column_dimensions['B'].width = 70
    ws.column_dimensions['C'].width = 15
    ws.column_dimensions['D'].width = 15
    ws.column_dimensions['E'].width = 25
    
    # –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    ws.freeze_panes = 'A2'
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    wb.save(output_file)
    print(f"\n‚úÖ Excel —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
    print(f"   –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {len(df)}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 80)
    print("üöÄ –ü–ê–†–°–ò–ù–ì PDF –°–ü–ï–¶–ò–§–ò–ö–ê–¶–ò–ô")
    print("=" * 80)
    
    # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å PDF
    pdf_folder = '/Users/exmuzzy2/git/fedor/pdf'
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö PDF —Ñ–∞–π–ª–æ–≤
    pdf_files = [f for f in os.listdir(pdf_folder) if f.endswith('.pdf')]
    pdf_files.sort()  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏
    
    print(f"\nüìÅ –ù–∞–π–¥–µ–Ω–æ PDF —Ñ–∞–π–ª–æ–≤: {len(pdf_files)}")
    
    # –ü–∞—Ä—Å–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã
    all_data = []
    
    for pdf_file in pdf_files:
        pdf_path = os.path.join(pdf_folder, pdf_file)
        file_data = parse_pdf_file(pdf_path)
        all_data.extend(file_data)
    
    print(f"\nüìä –í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(all_data)}")
    
    # –°–æ–∑–¥–∞–µ–º Excel
    output_file = '/Users/exmuzzy2/git/fedor/specifications_full.xlsx'
    create_excel_with_formatting(all_data, output_file)
    
    print("\n" + "=" * 80)
    print("‚úÖ –ì–û–¢–û–í–û!")
    print("=" * 80)


if __name__ == '__main__':
    main()

